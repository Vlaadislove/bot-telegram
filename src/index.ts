import { Bot, Context, GrammyError, HttpError, InlineKeyboard, Keyboard } from 'grammy'
import * as settings from "./settings"
import mongoose from 'mongoose';
import { checkFreeSub, checkPayment, checkUser } from './service/other-service';
import { connectInlineBoard, connectKeyBoard, startKeyBoard } from './service/keyboard-service';
import { paymentCreateApi } from './api/api';


export const bot = new Bot(settings.BOT_TOKEN)

bot.api.setMyCommands([
    {
        command: 'start',
        description: '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'
    },
    {
        command: 'help',
        description: '–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å'
    },
    {
        command: 'buy',
        description: '–ü—Ä–æ–¥–ª–∏—Ç—å/–∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'
    },
])


bot.command('start', async (ctx: Context) => {
    await checkUser(ctx)
    await ctx.reply(`–ü—Ä–∏–≤–µ—Ç ${ctx.message?.from.first_name}!`, {
        reply_markup: startKeyBoard
    })
    await ctx.reply(`<b>VPNinja</b>  ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –≤–∞–º –¥–æ—Å—Ç—É–ø –≤ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.

–ü—Ä–µ–æ–±—Ä–µ—Ç–∞—è –ø–æ–¥–ø–∏—Å–∫—É –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:

üöÄ –í—ã—Å–æ–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
üè¥‚Äç‚ò†Ô∏è –î–æ—Å—Ç—É–ø –∫ –ª—é–±—ã–º —Ä–µ—Å—É—Ä—Å–∞–º
ü•∏ –ü–æ–ª–Ω—É—é –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å
üîê –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º
üí≥ –û–ø–ª–∞—Ç–∞ –≤ —Ä—É–±–ª—è—Ö

‚ùó–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö 3 –¥–Ω—è —á—Ç–æ –±—ã –æ–ø—Ä–æ–±–æ–≤–∞—Ç—å VPN, –Ω–∞–∂–º–∏—Ç–µ <b>üîå –ü–æ–¥–∫–ª—é—á–∏—Ç—Å—è</b> –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏!

–£–∑–Ω–∞–π –±–æ–ª—å—à–µ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>‚ÑπÔ∏è –í—Å—ë –æ —Å–µ—Ä–≤–∏—Å–µ</b>
`, {
        reply_markup: connectInlineBoard,
        parse_mode: "HTML"
    })
})

bot.hears('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', async (ctx) => {
    await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {
        reply_markup: startKeyBoard,
    })
})

bot.hears('üÜò –ü–æ–º–æ—â—å', async (ctx) => {
    await ctx.reply('–û–ø–ª–∞—Ç–∏—Ç–µ!fdgdfgdf', {
        // reply_markup: inlineKeyboard
    })
})

bot.hears('üîå –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è', async (ctx) => {

    const data = await checkFreeSub(ctx.message?.from.id as number)

    if (data) {
        await ctx.reply(`–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:

1.–í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ç–∞—Ä–∏—Ñ
2.–í–Ω–µ—Å–∏ –ø–ª–∞—Ç–µ–∂
3.–ò –ø–æ–ª—É—á–∏ –∫–ª—é—á —Å –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è —Å–≤–æ–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ üòâ`, {
            reply_markup: connectKeyBoard
        })
    }
    
})


bot.callbackQuery('üîå–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è', async (ctx) => {
    const data = await checkFreeSub(ctx.update.callback_query.from.id as number)

    if (data) {
        await ctx.reply(`–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:

1.–í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ç–∞—Ä–∏—Ñ
2.–í–Ω–µ—Å–∏ –ø–ª–∞—Ç–µ–∂
3.–ò –ø–æ–ª—É—á–∏ –∫–ª—é—á —Å –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è —Å–≤–æ–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ üòâ`, {
            reply_markup: connectKeyBoard
        })
    }
    await ctx.answerCallbackQuery()
})

bot.command('buy', async (ctx: Context) => {
    const data = await checkFreeSub(ctx.message?.from.id as number)
    if (data) {
        await ctx.reply(`–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:

1.–í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ç–∞—Ä–∏—Ñ
2.–í–Ω–µ—Å–∏ –ø–ª–∞—Ç–µ–∂
3.–ò –ø–æ–ª—É—á–∏ –∫–ª—é—á —Å –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è —Å–≤–æ–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ üòâ`, {
            reply_markup: connectKeyBoard
        })
    }
})

bot.hears('1 –º–µ—Å—è—Ü - 140—Ä', async (ctx) => {
    const payment = await checkPayment(ctx.message?.from.id as number)
    if(!payment){
        await ctx.reply('–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –±–æ–ª—å—à–µ 2 —Å—á–µ—Ç–æ–≤ –Ω–∞ –æ–ø–ª–∞—Ç—É –≤ —á–∞—Å!')
        return
    }
    const url = await paymentCreateApi(ctx.message?.from.id as number, 140)
    console.log(url)
    const oneMonthInlineBoard = new InlineKeyboard().url('üí≥  –û–ø–ª–∞—Ç–∏—Ç—å 140—Ä', `${url}`)
    await ctx.reply('–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É: "–û–ø–ª–∞—Ç–∏—Ç—å", –æ–ø–ª–∞—Ç–∏ 140‚ÇΩ   –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –≤ –±–æ—Ç–∞ –∑–∞  VPNüòâ', {
        reply_markup: oneMonthInlineBoard
    })
})


bot.hears('3 –º–µ—Å—è—Ü–∞ - 390—Ä', async (ctx) => {
    const url = await paymentCreateApi(ctx.message?.from.id as number, 390)
    console.log(url)
    const oneMonthInlineBoard = new InlineKeyboard().url('üí≥  –û–ø–ª–∞—Ç–∏—Ç—å 390—Ä', `${url}`)
    await ctx.reply('–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É: "–û–ø–ª–∞—Ç–∏—Ç—å", –æ–ø–ª–∞—Ç–∏ 390‚ÇΩ   –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –≤ –±–æ—Ç–∞ –∑–∞  VPNüòâ', {
        reply_markup: oneMonthInlineBoard
    })
})

// bot.on('message', async (ctx) => {
//     // await ctx.replyWithPhoto('AgACAgIAAxkBAAINmmYn5IpYoHE42RlkVJme3cS2_mwTAALW3jEb7jhASZc0brbm5AGiAQADAgADcwADNAQ')
//     console.log(ctx.message.photo?.[0].file_id)
// })

bot.catch((err) => {
    const ctx = err.ctx;
    console.error(`Error while handling update ${ctx.update.update_id}:`); const e = err.error;
    if (e instanceof GrammyError) {
        console.error('Error in request:', e.description);
    } else if (e instanceof HttpError) {
        console.error('Could not contact Telegram:', e);
    } else {
        console.error('Unknown error:', e);
    }
});


async function start() {
    try {
        await mongoose.connect(settings.DB_URL).then(() => console.log('Mongoose –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.'))
        bot.start()
        console.log('Bot launched successfully')
    } catch (error) {
        console.log(error);
    }
}
start()

